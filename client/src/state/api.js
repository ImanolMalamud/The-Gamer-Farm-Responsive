import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

// Behind the scenes, createApi is using the createSlice function from Redux Toolkit to generate a slice of our Redux store that manages the state of our API requests.
export const api = createApi({
  reducerPath: "adminApi",
  baseQuery: fetchBaseQuery({ baseUrl: process.env.REACT_APP_BASE_URL }),
  tagTypes: ["User", "Products", "Customers"],
  endpoints: build => ({
    getUser: build.query({
      query: id => `general/user/${id}`,
      providesTags: ["User"],
    }),
    getProducts: build.query({
      query: () => `client/products`,
      providesTags: ["Products"],
    }),
    getCustomers: build.query({
      query: () => `client/customers`,
      providesTags: ["Customers"],
    }),
  }),
})

// We can use getUser endpoint in our application by calling the useGetDataQuery hook that's automatically generated by createApi. This hook will return the result of the getData query, along with some additional information like loading and error states.
export const { useGetUserQuery, useGetProductsQuery, useGetCustomersQuery } =
  api
